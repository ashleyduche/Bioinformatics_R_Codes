# Function: t_test_pvalues
# Description:
# Performs pairwise t-tests between a reference group and specified comparison groups, 
# with optional p-value adjustment for multiple testing.
#
# Parameters:
# - df: The input dataframe.
# - x_var: Independent variable (grouping column).
# - y_var: Dependent variable (numeric).
# - ref_group: The reference group for comparison.
# - compare_groups: A vector of groups to compare against the reference group.
# - adjust_method: Method for p-value adjustment (default = "none").
#
# Returns:
# - A named vector of p-values for the comparisons.
#
# Example Usage:
# df <- data.frame(group = rep(c("Control", "Treatment1", "Treatment2"), each = 10),
#                  value = c(rnorm(10, 5, 1), rnorm(10, 6, 1), rnorm(10, 7, 1)))
# pvals <- t_test_pvalues(df, x_var = "group", y_var = "value",
#                         ref_group = "Control", compare_groups = c("Treatment1", "Treatment2"),
#                         adjust_method = "bonferroni")

t_test_pvalues <- function(df, x_var, y_var, ref_group, compare_groups, adjust_method = "none") {
  # Check if x_var and y_var exist in the dataframe
  if (!x_var %in% names(df) || !y_var %in% names(df)) {
    stop("The specified x_var or y_var does not exist in the dataframe.")
  }

  # Initialize a named vector for p-values
  p_values <- setNames(numeric(length(compare_groups)), compare_groups)

  # Perform t-tests for each comparison group
  for (group in compare_groups) {
    test <- t.test(
      formula = as.formula(paste(y_var, "~", x_var)),
      data = df,
      subset = df[[x_var]] %in% c(ref_group, group)
    )
    p_values[group] <- test$p.value
  }

  # Adjust p-values if specified
  if (adjust_method != "none") {
    p_values <- p.adjust(p_values, method = adjust_method)
  }

  return(p_values)
}

